<?php

if(!defined('INTERNAL_COMMENT')){define('INTERNAL_COMMENT',1);}
if(!defined('IC_PUBLIC_COMMENT')){define('IC_PUBLIC_COMMENT',0);}
if(!defined('FIELD_INTERNAL_COMMENT')){define('FIELD_INTERNAL_COMMENT','field_internal_comment');}

/**
 * Implements hook_permission().
 */
function internal_comment_permission() {
  return array(
    'view internal comment' =>  array(
      'title' => t('View internal comment'),
      'description' => t('Allow users to view a internal comment.<i>note: if OG enable, it will overide this permission</i>'),
    ),
  );
}

/**
 * Implements hook_comment_view_alter().
 */
function internal_comment_comment_view_alter(&$build) {
  $comment = $build['#comment'];
  if(!empty($comment->{FIELD_INTERNAL_COMMENT}['und']['0']['value'])){
    $nid = $comment->nid;
    $node = node_load($nid);
    $build['#theme'] = 'internal_comment';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 */
function internal_comment_form_comment_form_alter(&$form, &$form_state) {
  $node = $form['#node'];

  // If user don't have access to view a internal comment, hide the field and set the value to public.
  if(!_internal_comment_check_access($node) ){
    $form[FIELD_INTERNAL_COMMENT]['und']['#type'] = 'hidden';
    $form[FIELD_INTERNAL_COMMENT]['und']['#default_value'] = IC_PUBLIC_COMMENT ;
    $form[FIELD_INTERNAL_COMMENT]['und']['#value'] = IC_PUBLIC_COMMENT ;
  }

  // When reply, set internal comment to the same value as the parent.
  if(!empty($form['pid']['#value'])){

    $parent_comment = comment_load($form['pid']['#value']);
    $parent_comment_internal_value = $parent_comment->{FIELD_INTERNAL_COMMENT}['und'][0]['value'];

    $form[FIELD_INTERNAL_COMMENT]['und']['#type'] = 'hidden';
    $form[FIELD_INTERNAL_COMMENT]['und']['#default_value'] = $parent_comment_internal_value ;
    $form[FIELD_INTERNAL_COMMENT]['und']['#value'] = $parent_comment_internal_value ;
  }

}

/**
 * Process variables for internal_comment.tpl.php.
 *
 * @see internal_comment.tpl.php
 */
function internal_comment_preprocess_internal_comment(&$vars){
  // Call the core comment preprocess to get all vars/
  template_preprocess_comment($vars);

  $node = $vars['node'];
  $allowed = _internal_comment_check_access($node);
  $vars['allowed'] = $allowed;

  $comment_author_id = $vars['comment']->uid;
  $comment_author = user_load($comment_author_id);
  $vars['comment_is_internal'] = t('%name posted a internal comment.', array('%name' => format_username( $comment_author)) );
  // This comment is internal and user has no access, so unset comment reply link.
  unset($vars['content']['links']['comment']['#links']['comment-reply']);
}

/**
 * Implements hook_theme().
 */
function internal_comment_theme() {
  return array(
    'internal_comment' => array(
      'template' => 'internal_comment',
      'render element' => 'elements',
    ),
  );
}

/**
 * Check if the current user has access to the comment.
 */
function _internal_comment_check_access($node) {
  global $user;
  if(module_exists('og')){
    if(og_is_group('node', $node)){
      $user_membership = og_get_membership('node',$node->nid,'user',$user->uid );
      return ($user_membership && $user_membership->state == 1 ) ? TRUE : FALSE;
    }
    else{
      if (og_is_group_content_type('node', $node->type) ){
        $groups = og_get_entity_groups('node',$node);

        $to_return = FALSE;
        foreach($groups['node'] as $nid){
          $user_membership = og_get_membership('node',$nid,'user',$user->uid );
          if( $user_membership && $user_membership->state == 1 ){
            $to_return = TRUE;
          }
        }
        return $to_return;
      }
    }
  }

  return user_access('view internal comment');
}

/**
* Check used by Rules. Allow access to comments by default, unless field_internal_comment
* is present in which case we check permissions.
*/
function internal_comment_check_comment_access($user, $comment){
  $has_access = TRUE;

  if(!empty($comment->field_internal_comment[LANGUAGE_NONE][0]['value'])){
    $has_access = user_access('view internal comment', $user);
  }

  return $has_access;
}
